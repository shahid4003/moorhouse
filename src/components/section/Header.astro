---
import { defaultLanguage, type LanguageCode } from "@/i18n/ui";
import { getRelativeLocaleUrl } from "astro:i18n";
import { getEntry } from "astro:content";
import { LanguageSelector } from "./langugeSelector";
import ImageMod from "./ImageMod.astro";

const { languagesForSelector } = Astro.props;
const currentLocale =
  (Astro.currentLocale as LanguageCode | undefined) ?? defaultLanguage;

let navbar: any;
const navbarFile = currentLocale === "de" ? "navbar-de" : "navbar-en";
try {
  navbar = await getEntry("singletons", navbarFile);
} catch (error) {
  console.warn(`Could not load navbar data for ${navbarFile}:`, error);
}
---

<header
  class="sticky top-0 z-50 w-full bg-white/80 backdrop-blur-md border-b border-border/40 transition-all"
>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo and Mobile Menu Button -->
      <div class="flex items-center gap-4">
        <a
          href={getRelativeLocaleUrl(currentLocale, "/")}
          class="flex items-center gap-2"
        >
          {
            navbar?.data?.logo && (
              <ImageMod
                src={navbar.data.logo}
                alt="Logo"
                className="h-16 w-48 object-contain transition-transform hover:scale-105"
                loading="eager"
              />
            )
          }
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex items-center gap-8" id="navItems">
        {
          navbar?.data?.menu?.map((item: any, index: number) => {
            const hasSubMenu = item.subMenu?.length > 0;
            return hasSubMenu ? (
              <div class="relative group" id={`desktop-dropdown-${index}`}>
                <button
                  class="flex items-center gap-1 text-sm font-medium text-foreground/90 hover:text-foreground transition-colors py-2"
                  data-dropdown-toggle={`desktop-dropdown-menu-${index}`}
                >
                  {item.text}
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="transition-transform group-hover:rotate-180"
                  >
                    <polyline points="6 9 12 15 18 9" />
                  </svg>
                </button>

                <div
                  class="absolute left-0 mt-2 w-56 origin-top-right rounded-lg bg-white shadow-lg ring-1 ring-border/10 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50"
                  id={`desktop-dropdown-menu-${index}`}
                >
                  {item.subMenu.map((sub: any) => (
                    <a
                      href={getRelativeLocaleUrl(currentLocale, sub.link)}
                      class="block px-4 py-2 text-sm hover:bg-accent hover:text-accent-foreground transition-colors first:rounded-t-lg last:rounded-b-lg"
                    >
                      {sub.text}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a
                href={getRelativeLocaleUrl(currentLocale, item.link)}
                class="relative text-sm font-medium text-foreground/90 hover:text-foreground transition-colors py-2 after:absolute after:bottom-0 after:left-0 after:h-0.5 after:w-0 after:bg-primary after:transition-all after:duration-300 hover:after:w-full"
              >
                {item.text}
              </a>
            );
          })
        }
      </nav>

      <!-- Right side controls -->
      <div class="flex items-center gap-4">
        <div class="hidden lg:flex items-center gap-4">
          <LanguageSelector
            currentLocale={currentLocale}
            languages={languagesForSelector}
            client:load
          />
        </div>
        <button
          class="lg:hidden text-foreground p-1"
          id="menuBtn"
          aria-label="Open menu"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <line x1="4" y1="12" x2="20" y2="12"></line>
            <line x1="4" y1="6" x2="20" y2="6"></line>
            <line x1="4" y1="18" x2="20" y2="18"></line>
          </svg>
        </button>
      </div>
    </div>
  </div>
</header>

<!-- Mobile Menu -->
<div
  class="lg:hidden fixed inset-0 z-[9999] transition-all duration-300 hidden"
  id="mobileMenu"
>
  <div
    class="ml-auto h-full sm:w-80 w-60 bg-white/90 bg-popover shadow-lg border-l border-border/20 overflow-y-auto backdrop-blur-md"
    id="mobileMenuContent"
  >
    <div class="p-4">
      <button
        class="absolute top-4 right-4 p-1 text-foreground/70 hover:text-foreground transition-colors"
        id="closeMenu"
        aria-label="Close menu"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>

      <nav class="mt-12 space-y-2" id="mobileNavItems">
        {
          navbar?.data?.menu?.map((item: any, index: number) => {
            const hasSubMenu = item.subMenu?.length > 0;
            return hasSubMenu ? (
              <div class="space-y-1" id={`mobile-dropdown-${index}`}>
                <button
                  class="flex w-full items-center justify-between py-2 text-sm font-medium text-foreground/90 hover:text-foreground transition-colors"
                  data-mobile-dropdown-toggle={`mobile-dropdown-menu-${index}`}
                >
                  {item.text}
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="transition-transform"
                    id={`mobile-dropdown-arrow-${index}`}
                  >
                    <polyline points="6 9 12 15 18 9" />
                  </svg>
                </button>

                <div
                  class="ml-4 space-y-1 overflow-hidden max-h-0 transition-all duration-300"
                  id={`mobile-dropdown-menu-${index}`}
                >
                  {item.subMenu.map((sub: any) => (
                    <a
                      href={getRelativeLocaleUrl(currentLocale, sub.link)}
                      class="block py-2 text-sm text-foreground/70 hover:text-foreground hover:bg-accent/50 rounded px-2 transition-colors"
                    >
                      {sub.text}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a
                href={getRelativeLocaleUrl(currentLocale, item.link)}
                class="block py-2 text-sm font-medium text-foreground/90 hover:text-foreground transition-colors"
              >
                {item.text}
              </a>
            );
          })
        }
      </nav>

      <div class="mt-8 pt-4 border-t border-border/20">
        <LanguageSelector
          currentLocale={currentLocale}
          languages={languagesForSelector}
          client:load
        />
      </div>
    </div>
  </div>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    // Mobile menu toggle
    const menuBtn = document.getElementById("menuBtn");
    const closeMenu = document.getElementById("closeMenu");
    const mobileMenu = document.getElementById("mobileMenu");
    const mobileMenuContent = document.getElementById("mobileMenuContent");

    function toggleMobileMenu(show) {
      if (show) {
        mobileMenu.classList.remove("hidden");
        document.body.style.overflow = "hidden";
        mobileMenuContent.style.transform = "translateX(0)";
      } else {
        mobileMenuContent.style.transform = "translateX(100%)";
        setTimeout(() => {
          mobileMenu.classList.add("hidden");
          document.body.style.overflow = "";
        }, 300);
      }
    }

    menuBtn?.addEventListener("click", () => toggleMobileMenu(true));
    closeMenu?.addEventListener("click", () => toggleMobileMenu(false));
    mobileMenu?.addEventListener("click", e => {
      if (e.target === mobileMenu) toggleMobileMenu(false);
    });

    // Desktop dropdowns
    document.querySelectorAll("[data-dropdown-toggle]").forEach(button => {
      const dropdownId = button.getAttribute("data-dropdown-toggle");
      const dropdown = document.getElementById(dropdownId);

      button.addEventListener("click", () => {
        dropdown.classList.toggle("opacity-0");
        dropdown.classList.toggle("invisible");
        dropdown.classList.toggle("opacity-100");
        dropdown.classList.toggle("visible");
      });
    });

    // Mobile dropdowns
    document
      .querySelectorAll("[data-mobile-dropdown-toggle]")
      .forEach(button => {
        const dropdownId = button.getAttribute("data-mobile-dropdown-toggle");
        const dropdown = document.getElementById(dropdownId);
        const arrowId = button.querySelector("svg").id;
        const arrow = document.getElementById(arrowId);

        button.addEventListener("click", () => {
          const isOpen =
            dropdown.style.maxHeight && dropdown.style.maxHeight !== "0px";

          if (isOpen) {
            dropdown.style.maxHeight = "0";
            dropdown.style.paddingTop = "0";
            dropdown.style.paddingBottom = "0";
            arrow.style.transform = "rotate(0deg)";
          } else {
            dropdown.style.maxHeight = dropdown.scrollHeight + "px";
            dropdown.style.paddingTop = "0.5rem";
            dropdown.style.paddingBottom = "0.5rem";
            arrow.style.transform = "rotate(180deg)";
          }
        });
      });

    // Close dropdowns when clicking outside
    document.addEventListener("click", function (e) {
      // Desktop dropdowns
      document
        .querySelectorAll('[id^="desktop-dropdown-menu-"]')
        .forEach(dropdown => {
          if (
            !dropdown.contains(e.target) &&
            !e.target.closest(`[data-dropdown-toggle="${dropdown.id}"]`)
          ) {
            dropdown.classList.add("opacity-0", "invisible");
            dropdown.classList.remove("opacity-100", "visible");
          }
        });
    });
  });

  // Re-initialize after view transitions
  document.addEventListener("astro:after-swap", function () {
    document.dispatchEvent(new Event("DOMContentLoaded"));
  });
</script>
