---
import { getEntry } from "astro:content";
let navbar = await getEntry("header", "header");

const { logo, navLinks = [], actions = [] }: any = navbar?.data ?? {};
---

<header
  class="border-border/40 sticky top-0 z-50 w-full border-b bg-white/80 py-4 backdrop-blur-md transition-all"
>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <a href="/" class="flex items-center gap-2">
        {
          logo && (
            <img
              src={logo}
              alt="Logo"
              class="!h-20 w-48 object-contain"
              loading="eager"
            />
          )
        }
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden items-center gap-8 lg:flex">
        {
          navLinks.map((item, idx) => {
            const hasSubmenu = item.sublinks && item.sublinks.length > 0;
            return hasSubmenu ? (
              <div class="group relative">
                <button class="text-foreground/90 hover:text-foreground flex items-center gap-1 py-2 text-sm font-medium transition-colors">
                  {item.label}
                  <svg
                    class="ml-1 h-4 w-4 transition-transform group-hover:rotate-180"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    viewBox="0 0 24 24"
                  >
                    <polyline points="6 9 12 15 18 9" />
                  </svg>
                </button>
                <div class="ring-border/10 invisible absolute left-0 z-50 mt-2 w-56 origin-top-right rounded-lg bg-white opacity-0 shadow-lg ring-1 transition-all duration-200 group-hover:visible group-hover:opacity-100">
                  {item.sublinks.map((sub, subIdx) => (
                    <a
                      href={sub.href}
                      class="hover:bg-accent hover:text-accent-foreground block px-4 py-2 text-sm transition-colors first:rounded-t-lg last:rounded-b-lg"
                    >
                      {sub.label}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a
                href={item.href}
                class="text-foreground/90 hover:text-foreground relative py-2 text-sm font-medium transition-colors"
              >
                {item.label}
              </a>
            );
          })
        }
      </nav>

      <!-- Actions (e.g. phone) -->
      <div class="hidden items-center gap-4 lg:flex">
        {
          actions.map((action, idx) => (
            <a
              href={action.href}
              class="bg-secondary rounded-full px-4 py-2 font-semibold text-white"
            >
              {action.label}
            </a>
          ))
        }
      </div>

      <!-- Mobile Menu Button -->
      <button
        class="text-foreground p-1 lg:hidden"
        id="menuBtn"
        aria-label="Open menu"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <line x1="4" y1="12" x2="20" y2="12"></line>
          <line x1="4" y1="6" x2="20" y2="6"></line>
          <line x1="4" y1="18" x2="20" y2="18"></line>
        </svg>
      </button>
    </div>
  </div>
</header>

<!-- Mobile Menu -->
<div
  class="fixed inset-0 z-[9999] hidden transition-all duration-300 lg:hidden"
  id="mobileMenu"
>
  <div
    class="bg-popover border-border/20 ml-auto h-full w-60 overflow-y-auto border-l bg-white/90 shadow-lg backdrop-blur-md sm:w-80"
    id="mobileMenuContent"
  >
    <div class="p-4">
      <button
        class="text-foreground/70 hover:text-foreground absolute right-4 top-4 p-1 transition-colors"
        id="closeMenu"
        aria-label="Close menu"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      <nav class="mt-12 space-y-2">
        {
          navLinks.map((item, idx) => {
            const hasSubmenu = item.sublinks && item.sublinks.length > 0;
            return hasSubmenu ? (
              <div class="space-y-1">
                <button class="text-foreground/90 hover:text-foreground flex w-full items-center justify-between py-2 text-sm font-medium transition-colors">
                  {item.label}
                  <svg
                    class="ml-1 h-4 w-4"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    viewBox="0 0 24 24"
                  >
                    <polyline points="6 9 12 15 18 9" />
                  </svg>
                </button>
                <div class="ml-4 space-y-1">
                  {item.sublinks.map((sub, subIdx) => (
                    <a
                      href={sub.href}
                      class="text-foreground/70 hover:text-foreground hover:bg-accent/50 block rounded px-2 py-2 text-sm transition-colors"
                    >
                      {sub.label}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a
                href={item.href}
                class="text-foreground/90 hover:text-foreground block py-2 text-sm font-medium transition-colors"
              >
                {item.label}
              </a>
            );
          })
        }
        {/* Actions for mobile */}
        <div class="mt-6">
          {
            actions.map((action, idx) => (
              <a
                href={action.href}
                class="bg-secondary mb-2 block rounded-full px-4 py-2 font-semibold text-white"
              >
                {action.label}
              </a>
            ))
          }
        </div>
      </nav>
    </div>
  </div>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    // Mobile menu toggle
    const menuBtn = document.getElementById("menuBtn");
    const closeMenu = document.getElementById("closeMenu");
    const mobileMenu = document.getElementById("mobileMenu");
    const mobileMenuContent = document.getElementById("mobileMenuContent");

    function toggleMobileMenu(show) {
      if (show) {
        mobileMenu.classList.remove("hidden");
        document.body.style.overflow = "hidden";
        mobileMenuContent.style.transform = "translateX(0)";
      } else {
        mobileMenuContent.style.transform = "translateX(100%)";
        setTimeout(() => {
          mobileMenu.classList.add("hidden");
          document.body.style.overflow = "";
        }, 300);
      }
    }

    menuBtn?.addEventListener("click", () => toggleMobileMenu(true));
    closeMenu?.addEventListener("click", () => toggleMobileMenu(false));
    mobileMenu?.addEventListener("click", e => {
      if (e.target === mobileMenu) toggleMobileMenu(false);
    });

    // Desktop dropdowns
    document.querySelectorAll("[data-dropdown-toggle]").forEach(button => {
      const dropdownId = button.getAttribute("data-dropdown-toggle");
      const dropdown = document.getElementById(dropdownId);

      button.addEventListener("click", () => {
        dropdown.classList.toggle("opacity-0");
        dropdown.classList.toggle("invisible");
        dropdown.classList.toggle("opacity-100");
        dropdown.classList.toggle("visible");
      });
    });

    // Mobile dropdowns
    document
      .querySelectorAll("[data-mobile-dropdown-toggle]")
      .forEach(button => {
        const dropdownId = button.getAttribute("data-mobile-dropdown-toggle");
        const dropdown = document.getElementById(dropdownId);
        const arrowId = button.querySelector("svg").id;
        const arrow = document.getElementById(arrowId);

        button.addEventListener("click", () => {
          const isOpen =
            dropdown.style.maxHeight && dropdown.style.maxHeight !== "0px";

          if (isOpen) {
            dropdown.style.maxHeight = "0";
            dropdown.style.paddingTop = "0";
            dropdown.style.paddingBottom = "0";
            arrow.style.transform = "rotate(0deg)";
          } else {
            dropdown.style.maxHeight = dropdown.scrollHeight + "px";
            dropdown.style.paddingTop = "0.5rem";
            dropdown.style.paddingBottom = "0.5rem";
            arrow.style.transform = "rotate(180deg)";
          }
        });
      });

    // Close dropdowns when clicking outside
    document.addEventListener("click", function (e) {
      // Desktop dropdowns
      document
        .querySelectorAll('[id^="desktop-dropdown-menu-"]')
        .forEach(dropdown => {
          if (
            !dropdown.contains(e.target) &&
            !e.target.closest(`[data-dropdown-toggle="${dropdown.id}"]`)
          ) {
            dropdown.classList.add("opacity-0", "invisible");
            dropdown.classList.remove("opacity-100", "visible");
          }
        });
    });
  });

  // Re-initialize after view transitions
  document.addEventListener("astro:after-swap", function () {
    document.dispatchEvent(new Event("DOMContentLoaded"));
  });
</script>
