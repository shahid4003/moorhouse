---
export interface ImageGalleryProps {
  images: {
    title: string;
    description: string;
    GalleryImages: string;
  }[];
}

const { title, images } = Astro.props;
---

<div class="relative mx-auto max-w-7xl px-6 py-16 lg:!py-20">
  {
    title && (
      <h2 class="mb-8 text-center text-3xl font-semibold uppercase">{title}</h2>
    )
  }

  <div
    id="gallery"
    class="grid grid-cols-1 gap-4 lg:grid-cols-3 xl:grid-cols-4"
    aria-label="Image gallery"
  >
    {
      images.length === 0 ? (
        <p class="col-span-full text-center text-gray-500">
          No images available.
        </p>
      ) : (
        images.map((item, index) => (
          <div
            class="gallery-item group relative cursor-pointer overflow-hidden rounded-xl shadow-md transition-all hover:shadow-lg"
            tabindex="0"
            aria-label={`${item.title} - ${item.description}`}
            data-index={index}
          >
            <img
              src={item.GalleryImages}
              alt={item.description || item.title}
              class="h-full w-full object-cover transition-transform duration-500 group-hover:scale-105"
              loading="lazy"
              width="300"
              height="300"
              data-index={index}
            />

            <div class="absolute inset-x-0 bottom-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent p-4 opacity-90 transition-opacity duration-300 group-hover:opacity-100">
              <h3 class="text-base font-semibold text-white">{item.title}</h3>
              {item.description && (
                <p class="mt-1 text-xs text-gray-200">{item.description}</p>
              )}
            </div>
          </div>
        ))
      )
    }
  </div>

  <div
    id="lightbox"
    class="bg-primary fixed inset-0 z-50 flex hidden items-center justify-center p-4 backdrop-blur-sm transition-opacity duration-300"
    role="dialog"
    aria-modal="true"
    aria-label="Image viewer"
  >
    <button
      id="close-lightbox"
      class="absolute right-6 top-6 text-4xl text-white transition-colors hover:text-gray-300"
      aria-label="Close image viewer"
    >
      &times;
    </button>

    {
      images.length > 0 && (
        <span
          id="image-count"
          class="absolute left-1/2 top-6 -translate-x-1/2 rounded-md bg-black/50 px-3 py-1 text-sm text-white shadow-md"
          aria-live="polite"
        />
      )
    }

    <button
      id="prev-image"
      class="absolute left-4 top-1/2 -translate-y-1/2 rounded-full bg-black/40 p-3 text-3xl text-white backdrop-blur-sm transition hover:scale-105 hover:bg-black/60"
      aria-label="Previous image"
    >
      &#10094;
    </button>

    <button
      id="next-image"
      class="absolute right-4 top-1/2 -translate-y-1/2 rounded-full bg-black/40 p-3 text-3xl text-white backdrop-blur-sm transition hover:scale-105 hover:bg-black/60"
      aria-label="Next image"
    >
      &#10095;
    </button>

    <div
      class="relative mx-auto flex max-h-[85vh] w-full max-w-6xl flex-col items-center justify-center text-center"
    >
      <img
        id="lightbox-image"
        class="max-h-[75vh] w-auto scale-95 rounded-2xl object-contain shadow-2xl transition-transform duration-300"
        src=""
        alt=""
        aria-hidden="true"
      />

      <div id="lightbox-title" class="mt-4 max-w-2xl text-base text-gray-200">
        <span class="font-semibold" id="lightbox-title-text"></span>
        <span class="text-gray-300" id="lightbox-description-text"></span>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  (function () {
    // DOM elements
    const gallery = document.getElementById("gallery");
    const lightbox = document.getElementById("lightbox");
    const lightboxImage = document.getElementById("lightbox-image");
    const lightboxTitle = document.getElementById("lightbox-title-text");
    const lightboxDescription = document.getElementById(
      "lightbox-description-text"
    );
    const closeLightboxBtn = document.getElementById("close-lightbox");
    const prevImageBtn = document.getElementById("prev-image");
    const nextImageBtn = document.getElementById("next-image");
    const thumbnailStrip = document.getElementById("thumbnail-strip");
    const imageCount = document.getElementById("image-count");
    // State
    let currentIndex = 0;
    let galleryItems = [];

    // Initialize
    function initGallery() {
      galleryItems = Array.from(gallery.querySelectorAll(".gallery-item"));

      // Set up event listeners
      galleryItems.forEach(item => {
        item.addEventListener("click", handleGalleryItemClick);
        item.addEventListener("keydown", e => {
          if (e.key === "Enter" || e.key === " ") {
            e.preventDefault();
            handleGalleryItemClick(e);
          }
        });
      });

      if (thumbnailStrip) {
        thumbnailStrip.querySelectorAll(".thumbnail").forEach(thumb => {
          thumb.addEventListener("click", handleThumbnailClick);
        });
      }

      closeLightboxBtn.addEventListener("click", closeLightbox);
      prevImageBtn.addEventListener("click", showPrevImage);
      nextImageBtn.addEventListener("click", showNextImage);

      // Keyboard navigation
      document.addEventListener("keydown", handleKeyDown);
      lightbox.addEventListener("click", handleLightboxClick);
    }

    // Event handlers
    function handleGalleryItemClick(e) {
      const item = e.currentTarget;
      currentIndex = parseInt(item.dataset.index);
      openLightbox(currentIndex);
    }

    function handleThumbnailClick(e) {
      currentIndex = parseInt(e.currentTarget.dataset.index);
      openLightbox(currentIndex);
    }

    function handleKeyDown(e) {
      if (lightbox.classList.contains("hidden")) return;

      switch (e.key) {
        case "Escape":
          closeLightbox();
          break;
        case "ArrowLeft":
          showPrevImage();
          break;
        case "ArrowRight":
          showNextImage();
          break;
      }
    }

    function handleLightboxClick(e) {
      if (e.target === lightbox) {
        closeLightbox();
      }
    }

    // Lightbox functions
    function openLightbox(index) {
      if (index < 0 || index >= galleryItems.length) return;

      currentIndex = index;
      const img = galleryItems[index].querySelector("img");
      const title = galleryItems[index].getAttribute("aria-label");
      const description = galleryItems[index].getAttribute("title");
      lightboxImage.src = img.src;
      lightboxImage.alt = img.alt;
      lightboxTitle.textContent = title;
      lightboxDescription.textContent = description;

      lightbox.classList.remove("hidden");
      document.body.style.overflow = "hidden";
      imageCount.textContent = `${currentIndex + 1}/${galleryItems.length}`;
      // Focus management
      closeLightboxBtn.focus();

      // Update active thumbnail
      updateActiveThumbnail();
    }

    function closeLightbox() {
      lightbox.classList.add("hidden");
      imageCount.textContent = `${currentIndex + 1}/${galleryItems.length}`;
      // Focus management
      closeLightboxBtn.focus();

      // Update active thumbnail
      updateActiveThumbnail();
    }

    function closeLightbox() {
      lightbox.classList.add("hidden");
      document.body.style.overflow = "";

      // Return focus to the gallery item that opened the lightbox
      if (galleryItems[currentIndex]) {
        galleryItems[currentIndex].focus();
      }
    }

    function showPrevImage() {
      const newIndex =
        (currentIndex - 1 + galleryItems.length) % galleryItems.length;
      openLightbox(newIndex);
    }

    function showNextImage() {
      const newIndex = (currentIndex + 1) % galleryItems.length;
      openLightbox(newIndex);
    }

    function updateActiveThumbnail() {
      if (!thumbnailStrip) return;

      const thumbnails = thumbnailStrip.querySelectorAll(".thumbnail");
      thumbnails.forEach(thumb => {
        const index = parseInt(thumb.dataset.index);
        thumb.classList.toggle("opacity-100", index === currentIndex);
        thumb.classList.toggle("opacity-50", index !== currentIndex);
      });
    }

    // Initialize when DOM is loaded
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initGallery);
    } else {
      initGallery();
    }
  })();
</script>

<style>
  /* Custom scrollbar for thumbnail strip */
  #thumbnail-strip::-webkit-scrollbar {
    height: 6px;
  }

  #thumbnail-strip::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
  }

  #thumbnail-strip::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
  }

  /* Focus styles */
  .gallery-item:focus {
    outline: 2px solid white;
    outline-offset: 2px;
  }

  /* Animation for lightbox */
  #lightbox {
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  #lightbox:not(.hidden) {
    opacity: 1;
  }

  #lightbox-image {
    transform: scale(0.95);
    transition: transform 0.2s ease;
  }

  #lightbox:not(.hidden) #lightbox-image {
    transform: scale(1);
  }
</style>
